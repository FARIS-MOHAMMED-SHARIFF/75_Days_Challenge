/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode root, TreeNode subRoot) {
        
        if(root == null)
            return false;
        if(root.val == subRoot.val)
        {
            boolean isTrue = isSame(root , subRoot);
            if(isTrue)
                return true;
            //or
            //if(isSame(root,subroot))
            //  return true;
        }
        
        boolean left  = isSubtree(root.left  , subRoot);
        if(left)
            return true;
        boolean right = isSubtree(root.right , subRoot);
        if(right)
            return true;
        
        
        return false;           
    }
    
    public static boolean isSame(TreeNode root , TreeNode subRoot)
    {
        if(root == null && subRoot == null)
            return true;
        
        if(root == null || subRoot == null)
            return false;
        if(root.val != subRoot.val)
            return false;
        
        boolean left = isSame(root.left , subRoot.left);
        if(left == false)
            return false;
        
        boolean right = isSame(root.right , subRoot.right);
        if(right == false)
            return false;
        
        return true;
    }
}
// public class Solution {
//     public boolean isSubtree(TreeNode s, TreeNode t) {
//         if (s == null) return false;
//         if (isSame(s, t)) return true;
//         return isSubtree(s.left, t) || isSubtree(s.right, t);
//     }
    
//     private boolean isSame(TreeNode s, TreeNode t) {
//         if (s == null && t == null) return true;
//         if (s == null || t == null) return false;
        
//         if (s.val != t.val) return false;
        
//         return isSame(s.left, t.left) && isSame(s.right, t.right);
//     }
// }