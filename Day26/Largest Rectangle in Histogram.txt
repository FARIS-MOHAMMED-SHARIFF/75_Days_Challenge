class Solution {
    public int largestRectangleArea(int[] heights) {
        //First Approach - n*n -> for each element calculate the breadth
        Stack<Integer> stack = new Stack<>();
        
        int n = heights.length;
        //next smallest to left index
        int leftBound[] = new int[n];
        //next smallest to right index
        int rightBound[] = new int[n];
        // right - left - 1 = width 
        for(int i = 0 ; i < n ; i++)
        {
            if(stack.isEmpty())
            {
                leftBound[i] = -1;
            }
            else if(heights[stack.peek()] < heights[i])
            {
                leftBound[i] = stack.peek();
            }
            else
            {
                while(!stack.isEmpty() && heights[stack.peek()] >= heights[i])
                {
                    stack.pop();
                }
                if(stack.isEmpty())
                {
                    leftBound[i] = -1;
                }
                else
                {
                    leftBound[i] = stack.peek();
                }
            }
            stack.push(i);
        }
        stack.clear();
        
        stack.push(n-1);
        rightBound[n-1] = n;
        for(int i = n-2 ; i >= 0 ; i--)
        {
            if(stack.isEmpty())
            {
                rightBound[i] = n;
            }
            else if(heights[stack.peek()] < heights[i])
            {
                rightBound[i] = stack.peek();
            }
            else
            {
                while(!stack.isEmpty() && heights[stack.peek()] >= heights[i])
                {
                    stack.pop();
                }
                if(stack.isEmpty())
                {
                    rightBound[i] = n;
                }
                else
                {
                    rightBound[i] = stack.peek();
                }
            }
            stack.push(i);
        } 
        
        
        
        int maxArea = 0;
        int width = 0;
        int area = 0;
        for(int i = 0 ; i < n ; i++)
        {
            width = rightBound[i] - leftBound[i] - 1;
            area = heights[i] * width;
            if(area > maxArea)
                maxArea = area;
        }
        
        return maxArea;
        
    }
}